package builder

import (
	"github.com/aws-cloudformation/rain/cfn"
	"github.com/aws-cloudformation/rain/cfn/spec"
)

// CfnBuilder contains specific code for building cloudformation templates
type CfnBuilder struct {
	Builder
}

// NewCfnBuilder creates a new CfnBuilder
func NewCfnBuilder(includeOptional, buildIamPolicies bool) CfnBuilder {
	var b CfnBuilder
	b.Spec = spec.Cfn
	b.IncludeOptionalProperties = includeOptional
	b.BuildIamPolicies = buildIamPolicies

	return b
}

// Template produces a CloudFormation template for the
// resources in the config map
func (b CfnBuilder) Template(config map[string]string) (cfn.Template, map[string]interface{}) {
	// Generate resources
	resources := make(map[string]interface{})
	comments := make(map[string]interface{})
	for name, typeName := range config {
		resources[name], comments[name] = b.newResource(typeName)
	}

	outputs := make(map[string]interface{})
	for name, typeName := range config {
		r := b.Spec.ResourceTypes[typeName]

		for attName := range r.Attributes {
			outputs[name+attName] = map[string]interface{}{
				"Value": map[string]interface{}{
					"Fn::GetAtt": name + "." + attName,
				},
			}
		}
	}

	// Build the template
	return cfn.NewTemplate(map[string]interface{}{
			"AWSTemplateFormatVersion": "2010-09-09",
			"Description":              "Template generated by rain",
			"Resources":                resources,
			"Outputs":                  outputs,
		}), map[string]interface{}{
			"Resources": comments,
		}
}
